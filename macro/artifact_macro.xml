<?xml version="1.0" encoding="UTF-8"?>
<project name="cloudartifact-macro">
    <description>
        this file provide some cloudartifact macro defintion.
    </description>

    <macrodef name="cloudartifact-macro">
        <attribute name="scmType" default="git" />
        <attribute name="groupId" />
        <attribute name="artifactId" />
        <attribute name="artifactLane" default="jenkins" />
        <attribute name="artifactSuffix" default="" />
        <attribute name="artifactVersion" />
        <attribute name="cloudProvider" />
        <attribute name="appId" />
        <attribute name="secretId" />
        <attribute name="secretKey" />
        <attribute name="region" />
        <attribute name="bucket" />
        <attribute name="filesetDir" />
        <attribute name="filesetIncludes" default="" />
        <attribute name="filesetExcludes" default="" />
        <attribute name="isCreateChecksum" default="true" />
        <attribute name="allowRedeploy" default="false" />
        <sequential>

            <var name="artifacts.dir" value=".artifacts" />

            <tstamp>
              <format property="today" pattern="yyyy-MM-dd-HH-MM"/>
            </tstamp>

            <!-- artifact.lane -->
            <var name="##artifact.lane.dir##" value="@{artifactLane}" />
            <if>
              <equals arg1="@{artifactLane}" arg2="" trim="true" />
              <then>
                <var name="##artifact.lane.dir##" value="jenkins" />
              </then>
            </if>

            <!-- group.id -->
            <if>
              <equals arg1="@{groupId}" arg2="" trim="true" />
              <then>
                <fail messasge=" --// production info(group.id) is not configure" />
              </then>
              <else>
                <propertyregex property="group.id.dir" input="@{groupId}" regexp="\." replace="/" global="true" defaultValue="@{groupId}" />
                <var name="##group.id.dir##" value="${group.id.dir}" />
              </else>
            </if>

            <!-- artifact.id -->
            <if>
              <equals arg1="@{artifactId}" arg2="" trim="true" />
              <then>
                <fail message="--// production info(artifact.id) is not configure" />
              </then>
              <else>
                <var name="##artifact.id.dir##" value="@{artifactId}" />
              </else>
            </if>

            <var name="##artifact.path##" value="${##group.id.dir##}/${##artifact.id.dir##}" />

            <property name="outputDir" location="${task.reports.dir}" />
            <var name="tempOutputFile" value="${outputDir}/cloudartifact-report.xml" />

            <delete dir="${artifacts.dir}" /><mkdir dir="${artifacts.dir}" />

            <!-- copy artifact resource -->
            <copy todir="${artifacts.dir}" verbose="true">
              <fileset dir="@{filesetDir}" includes="@{filesetIncludes}" excludes="@{filesetExcludes}" />
            </copy>

            <if>
                <equals arg1="@{artifactVersion}" arg2="" trim="true" />
                <then>
                    <var name="##artifact.lane.dir##" value="svn/" />
                    <if>
                        <equals arg1="@{scmType}" arg2="svn" trim="true" />
                        <then>
                            <echo message="--// get svn revision..." />
                            <getSvnInfo targetFile="${ws.dir}" svnRevisionProperty="artifact.svn.revision"
                                          svnUrlProperty="artifact.svn.url" />

                            <propertyregex property="svn.branch.name1" input="${artifact.svn.url}" regexp=".*\/((trunk|branches|tags).*)$" select="\1" defaultValue=""/>
                            <propertyregex property="svn.repo.url" input="${artifact.svn.url}" regexp="(.*)\/(trunk|branches|tags).*$" select="\1" defaultValue=""/>

                            <propertyregex property="svn.branch.name2" input="${svn.branch.name1}" regexp="\/" replace="-" />

                            <var name="svn.branch.name" value="${svn.branch.name1}" />
                            <if>
                                <isset property="svn.branch.name2" />
                                <then>
                                    <var name="svn.branch.name" value="${svn.branch.name2}" />
                                </then>
                                <else>
                                    <var name="svn.branch.name" value="${svn.branch.name1}" />
                                </else>
                            </if>
                            <echo message="--// svn.repo.url: ${svn.repo.url}" />
                            <echo message="--// svn.branch.name: ${svn.branch.name}" />
                            <echo message="--// svn.revision: ${artifact.svn.revision}" />

                            <if>
                                <equals arg1="@{artifactSuffix}" arg2="" trim="true" />
                                <then>
                                    <property name="version.filename" value="${artifact.svn.revision}" />
                                </then>
                                <else>
                                    <property name="version.filename" value="${artifact.svn.revision}.@{artifactSuffix}" />
                                </else>
                            </if>

                            <echo message="--// version.filename: ${version.filename}" />
                            <var name="remotedir" value="${##artifact.path##}/${today}/${svn.branch.name}/${version.filename}" />
                        </then>
                        <elseif>
                            <equals arg1="@{scmType}" arg2="git" trim="true" />
                            <then>
                              <var name="##artifact.lane.dir##" value="git/" />
                                <echo message="${ws.dir}" />
                                <getGitCommitId repoDir="${ws.dir}" />
                                <var name="##version.number##" value="${git.short.commit.id}" />
                                <getGitBranch repoDir="${ws.dir}" />
                                <echo message="--// git.commit.id: ${##version.number##}" />
                                <echo message="--// git.branch: ${git.branch.name}" />
                                <var name="remotedir" value="${##artifact.path##}/${today}/${git.branch.name}/${git.short.commit.id}" />
                            </then>
                        </elseif>
                        <else>
                            <fail message="--// scm.type: ${scm.type} is not supported." />
                        </else>
                    </if>
                </then>
                <else>
                  <var name="remotedir" value="${##artifact.path##}/@{artifactVersion}" />
                </else>
            </if>

            <var name="remotedir" value="${##artifact.lane.dir##}/${remotedir}" />

            <echo message="--// artifact path: ${remotedir}" />

            <if>
              <istrue value="@{isCreateChecksum}" />
              <then>
                <checksum forceoverwrite="true" fileext=".md5">
                  <fileset dir="${artifacts.dir}">
                    <include name="**/*" />
                  </fileset>
                </checksum>
              </then>
            </if>

            <for param="artifactfile">
              <path>
                <fileset dir="${artifacts.dir}"/>
              </path>
              <sequential>
                <if>
                  <istrue value="@{allowRedeploy}" />
                  <then>
                    <cloudartifact-jar>
                      <cmdargs>
                        <arg line="-provider @{cloudProvider}" />
                        <arg line="-appId @{appId}" />
                        <arg line="-secretId @{secretId}" />
                        <arg line="-secretKey @{secretKey}" />
                        <arg line="-region @{region}" />
                        <arg line="-bucket @{bucket}" />
                        <arg line="-remoteDir /${remotedir}/" />
                        <arg line="--out-xml ${tempOutputFile}" />
                        <arg line="-redeploy" />
                        <arg line="@{artifactfile}" />
                      </cmdargs>
                    </cloudartifact-jar>
                  </then>
                  <else>
                    <cloudartifact-jar>
                      <cmdargs>
                        <arg line="-provider @{cloudProvider}" />
                        <arg line="-appId @{appId}" />
                        <arg line="-secretId @{secretId}" />
                        <arg line="-secretKey @{secretKey}" />
                        <arg line="-region @{region}" />
                        <arg line="-bucket @{bucket}" />
                        <arg line="-remoteDir /${remotedir}/" />
                        <arg line="--out-xml ${tempOutputFile}" />
                        <arg line="@{artifactfile}" />
                      </cmdargs>
                    </cloudartifact-jar>
                  </else>
                </if>
              </sequential>
            </for>

            <if>
                <available file="${tempOutputFile}" />
                <then>
                    <copy file="${tempOutputFile}" tofile="${outputDir}/summary.xml" />
                    <if>
                        <available file="${task.basedir}/convertor/report.xsl" />
                        <then>
                            <copy file="${task.basedir}/convertor/report.xsl" todir="${task.reports.dir}" />
                        </then>
                    </if>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="cloudartifact-jar">
      <element name="cmdargs" />
      <sequential>
        <property name="cloudartifact.jar.path" location="${task.basedir}/tool/cloudartifact-all-1.0.0.jar" />
        <java jar="${cloudartifact.jar.path}" fork="true" failonerror="true">
          <cmdargs />
        </java>
      </sequential>
    </macrodef>

</project>
